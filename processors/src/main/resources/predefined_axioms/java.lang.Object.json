[{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsIsReflexive(Object o) {\n    assertEquals(o, o);\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"},{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsIsSymmetric(Object x, Object y) {\n    assertEquals(x.equals(y), y.equals(x));\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"},{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsIsTransitive(Object x, Object y, Object z) {\n    if (x.equals(y) && y.equals(z)) {\n        assertEquals(x, z);\n    }\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"},{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsNullIsFalse(Object x) {\n    assertEquals(false, x.equals(null));\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"},{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void hashCodeCongruenceOnEquals(Object x, Object y) {\n    if (x.equals(y)) {\n        assertEquals(x.hashCode(), y.hashCode());\n    }\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"}]