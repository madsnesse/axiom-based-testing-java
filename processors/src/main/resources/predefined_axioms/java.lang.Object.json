[{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\r\npublic static void equalsIsReflexive(Object o) {\r\n    assertEquals(o, o);\r\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"},{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\r\npublic static void equalsIsSymmetric(Object x, Object y) {\r\n    assertEquals(x.equals(y), y.equals(x));\r\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"},{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\r\npublic static void equalsIsTransitive(Object x, Object y, Object z) {\r\n    if (x.equals(y) && y.equals(z)) {\r\n        assertEquals(x, z);\r\n    }\r\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"},{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\r\npublic static void equalsIsConsistent(Object x, Object y) {\r\n    assertEquals(x.equals(y), x.equals(y));\r\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"},{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\r\npublic static void equalsNullIsFalse(Object x) {\r\n    assertEquals(x.equals(null), false);\r\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"},{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\r\npublic static void equalsCongruence(Object o) {\r\n    //the public methods of a class\r\n    var m = o.getClass().getMethods();\r\n    // legg inn metoder som skal sjekkes i axiom prosseseringen\r\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"}]