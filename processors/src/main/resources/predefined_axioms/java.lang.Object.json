[{"method":"/**\n * It is reflexive: for any non-null reference value x, x.equals(x) should return true.\n */\n@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsIsReflexive(Object o) {\n    assertEquals(true, o.equals(o));\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"},{"method":"/**\n * It is symmetric: for any non-null reference values x and y, x.equals(y)\n * should return true if and only if y.equals(x) returns true.\n */\n@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsIsSymmetric(Object x, Object y) {\n    assertEquals(x.equals(y), y.equals(x));\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"},{"method":"/**\n * It is transitive: for any non-null reference values x, y, and z,\n * if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.\n */\n@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsIsTransitive(Object x, Object y, Object z) {\n    if (x.equals(y) && y.equals(z)) {\n        assertEquals(x, z);\n    }\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"},{"method":"/**\n * It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y)\n * consistently return true or consistently return false,\n * provided no information used in equals comparisons on the objects is modified.\n */\n@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsIsConsistent(Object x, Object y) {\n    assertEquals(x.equals(y), x.equals(y));\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"},{"method":"/**\n * For any non-null reference value x, x.equals(null) should return false.\n */\n@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsNullIsFalse(Object x) {\n    assertEquals(x.equals(null), false);\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"},{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsCongruence(Object o) {\n    //TODO implement equalsCongruence\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"},{"method":"/**\n * Whenever it is invoked on the same object more than once during an execution of a Java application,\n * the hashCode method must consistently return the same integer,\n * provided no information used in equals comparisons on the object is modified.\n * This integer need not remain consistent from one execution of an application to another execution of the same application.\n */\n@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void hashCodeConsistent(Object o) {\n    assertEquals(o.hashCode(), o.hashCode());\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"},{"method":"/**\n * If two objects are equal according to the {@code equals} method,\n * then calling the {@code hashCode} method on each of the two objects must produce the same integer result.\n */\n@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsHashCodeCongruence(Object a, Object b) {\n    if (a.equals(b)) {\n        assertEquals(a.hashCode(), b.hashCode());\n    }\n}","isGeneric":true,"qualifiedClassName":"java.lang.Object"}]