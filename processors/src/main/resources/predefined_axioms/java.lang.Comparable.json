[{"method":"/**\r\n * The implementor must ensure signum(x.compareTo(y)) == -signum(y.compareTo(x)) for all x and y.\r\n * (This implies that x.compareTo(y) must throw an exception if and only if y.compareTo(x) throws an exception.)\r\n */\r\n@AxiomForExistingClass(className = \"java.lang.Comparable\")\r\npublic static <T extends Comparable<T>> void compareToConsistentWithSignum(T x, T y) {\r\n    try {\r\n        var left = java.lang.Integer.signum(x.compareTo(y));\r\n        assertEquals(left, -java.lang.Integer.signum(y.compareTo(x)));\r\n    } catch (Exception e) {\r\n        try {\r\n            var right = -java.lang.Integer.signum(y.compareTo(x));\r\n        } catch (Exception ex) {\r\n            assertTrue(true);\r\n        }\r\n        assertTrue(false);\r\n    }\r\n}","isGeneric":true,"qualifiedClassName":"java.lang.Comparable"},{"method":"/**\r\n * The implementor must also ensure that the relation is transitive:\r\n * (x.compareTo(y) > 0 && y.compareTo(z) > 0) implies x.compareTo(z) > 0.\r\n */\r\n@AxiomForExistingClass(className = \"java.lang.Comparable\")\r\npublic static <T extends Comparable<T>> void compareToTransitive(T x, T y, T z) {\r\n    if (x.compareTo(y) > 0 && y.compareTo(z) > 0) {\r\n        assertEquals(true, x.compareTo(z) > 0);\r\n    } else\r\n        assertTrue(true);\r\n}","isGeneric":true,"qualifiedClassName":"java.lang.Comparable"}]