[{"method":"/**\n * Natural equivalence is more coarse grained than {@link Object#equals(Object)\n * equals}: checks that the equivalence defined by the\n * {@link Object#equals(Object) equals} method implies the equivalence defined\n * by the {@link Comparable#compareTo(Object) compareTo} method.\n *\n * @param T Comparable type to test\n * @param x object to be compared\n * @param y object to be compared\n */\n@AxiomForExistingClass(className = \"java.lang.Comparable\")\npublic static <T extends Comparable<T>> void compareToProperty3anaturalOrderingEquals(T x, T y) {\n    try {\n        if (x.equals(y))\n            assertEquals(0, x.compareTo(y), \"Note: this class has a natural ordering that is inconsistent with equals.\" + \" Method compareTo is too fine grained:\" + \" x=\" + x + \" y=\" + y);\n    } catch (RuntimeException e) {\n        assertTrue(true, \"some run-time exception occurred\");\n    }\n}","isGeneric":true,"qualifiedClassName":"java.lang.Comparable"},{"method":"/**\n * Natural equivalence is more fine grained than {@link Object#equals(Object)\n * equals}: checks that the equivalence defined by the\n * {@link Comparable#compareTo(Object) compareTo} method implies the equivalence\n * defined by the {@link Object#equals(Object) equals} method\n *\n * @param T Comparable type to test\n * @param x object to be compared\n * @param y object to be compared\n */\n@AxiomForExistingClass(className = \"java.lang.Comparable\")\npublic static <T extends Comparable<T>> void compareToProperty3bnaturalOrderingEquals(T x, T y) {\n    try {\n        if (x.compareTo(y) == 0)\n            assertEquals(x, y, \"Note: this class has a natural ordering that is inconsistent with equals.\" + \" Method compareTo is too coarse grained: \");\n    } catch (RuntimeException e) {\n        assertTrue(true, \"some run-time exception occurred\");\n    }\n}","isGeneric":true,"qualifiedClassName":"java.lang.Comparable"},{"method":"/**\n * compareTo property 1a: duality.\n *\n * <p>\n * The implementor must ensure\n * {@code sgn(x.compareTo(y)) == -sgn(y.compareTo(x))} for all {@code x} and\n * {@code y}. (This implies that {@code x.compareTo(y)} must throw an exception\n * iff {@code y.compareTo(x)} throws an exception.)\n */\n@AxiomForExistingClass(className = \"java.lang.Comparable\")\npublic static <T extends Comparable<T>> void compareToProperty1aDuality(T x, T y) {\n    try {\n        assertEquals(Integer.signum(x.compareTo(y)), -Integer.signum(y.compareTo(x)));\n    } catch (RuntimeException re) {\n        assertTrue(true, \"compareTo is allowed to throw.\");\n    }\n}","isGeneric":true,"qualifiedClassName":"java.lang.Comparable"},{"method":"/**\n * compareTo property 1b: comparison with null.\n * <p>\n * This implies that {@code x.compareTo(y)} must throw an exception iff\n * {@code y.compareTo(x)} throws an exception.\n * <p>\n * {@code e.compareTo(null)} should throw a {@link NullPointerException}.\n */\n@AxiomForExistingClass(className = \"java.lang.Comparable\")\npublic static <T extends Comparable<T>> void compareToProperty1bNull(T e) {\n    try {\n        e.compareTo(null);\n        fail(e + \".compareTo(null) should throw a NullPointerException\");\n    } catch (NullPointerException npe) {\n        assertTrue(true, \"Throws NullPointerException as required\");\n    }\n}","isGeneric":true,"qualifiedClassName":"java.lang.Comparable"},{"method":"/**\n * compareTo property 1c: strong symmetry (both alternatives fail or both\n * succeed).\n * <p>\n * This implies that {@code x.compareTo(y)} must throw an exception iff\n * {@code y.compareTo(x)} throws an exception.\n */\n@AxiomForExistingClass(className = \"java.lang.Comparable\")\npublic static <T extends Comparable<T>> void compareToProperty1cStrongSymmetry(T x, T y) {\n    try {\n        x.compareTo(y);\n        y.compareTo(x);\n        assertTrue(true, \"neither call fails\");\n    } catch (RuntimeException e) {\n        // at least one of the calls throws an exception\n        try {\n            x.compareTo(y);\n            fail(y + \".compareTo(\" + x + \") throws an exception while the converse does not\");\n        } catch (RuntimeException e1) {\n            try {\n                y.compareTo(x);\n                fail(x + \".compareTo(\" + y + \") throws an exception while the converse does not\");\n            } catch (RuntimeException e2) {\n                assertTrue(true, \"OK! Both calls fail symmetrically\");\n            }\n        }\n    }\n}","isGeneric":true,"qualifiedClassName":"java.lang.Comparable"},{"method":"/**\n * compareTo property 2 and 3: transitivity for all comparison operations. This\n * axiom merges the effect of the two axioms required by the documentation.\n *\n * <p>\n * The implementor must also ensure that the relation is transitive:\n * {@code (x.compareTo(y) > 0 && y.compareTo(z) > 0)} implies\n * {@code x.compareTo(z) > 0}.\n *\n * <p>\n * Finally, the implementor must ensure that {@code x.compareTo(y)==0} implies\n * that {@code sgn(x.compareTo(z)) == sgn(y.compareTo(z))}, for all {@code z}.\n */\n@AxiomForExistingClass(className = \"java.lang.Comparable\")\npublic static <T extends Comparable<T>> void compareToProperty2primeTransitive(T x, T y, T z) {\n    try {\n        if (x.compareTo(y) >= 0 && y.compareTo(z) >= 0)\n            assertTrue(x.compareTo(z) >= 0);\n    } catch (RuntimeException re) {\n        assertTrue(true, \"compareTo is allowed to throw.\");\n    }\n}","isGeneric":true,"qualifiedClassName":"java.lang.Comparable"},{"method":"/**\n * Sees the equals method as a congruence relation (smallest equivalence\n * relation that yields full abstraction). This should generate congruence\n * axioms for every declared interface and class.\n * <p>\n * This axiom is less restrictive than the strong recommendation that the\n * natural ordering is consistent with equals.\n */\n@AxiomForExistingClass(className = \"java.lang.Comparable\")\npublic static <T extends Comparable<T>> void congruenceCompareTo(T a, T b) {\n    try {\n        if (a.equals(b))\n            assertEquals(a.compareTo(b), 0, \"Compares (\" + a.getClass() + \")\" + a.toString() + \" (\" + b.getClass() + \")\" + b.toString());\n    } catch (RuntimeException e) {\n        assertTrue(true, \"some run-time exception occurred\");\n    }\n}","isGeneric":true,"qualifiedClassName":"java.lang.Comparable"}]